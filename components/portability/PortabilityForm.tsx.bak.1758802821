'use client';

import {useMemo, useRef, useState} from 'react';

/* ---------- Types ---------- */
type Result = {
  score: number;
  median: number;
  topQuartile: number;
  recs: string[];
  interp?: string[];
};

type Market = {
  id: string;
  label: string;
  region: 'Switzerland' | 'Europe' | 'Middle East' | 'Asia' | 'Americas';
  benchmark: {median: number; topQuartile: number};
};

/* ---------- Data ---------- */
const REGION_ORDER: Market['region'][] = [
  'Switzerland',
  'Europe',
  'Middle East',
  'Asia',
  'Americas'
];

const MARKETS: Market[] = [
  { id: 'ch_geneva',   label: 'Geneva',      region: 'Switzerland', benchmark: {median: 62, topQuartile: 78}},
  { id: 'ch_zurich',   label: 'Zürich',      region: 'Switzerland', benchmark: {median: 64, topQuartile: 80}},
  { id: 'eu_lux',      label: 'Luxembourg',  region: 'Europe',      benchmark: {median: 59, topQuartile: 75}},
  { id: 'eu_london',   label: 'London',      region: 'Europe',      benchmark: {median: 66, topQuartile: 82}},
  { id: 'me_dubai',    label: 'Dubai',       region: 'Middle East', benchmark: {median: 58, topQuartile: 74}},
  { id: 'asia_sg',     label: 'Singapore',   region: 'Asia',        benchmark: {median: 60, topQuartile: 77}},
  { id: 'asia_hk',     label: 'Hong Kong',   region: 'Asia',        benchmark: {median: 61, topQuartile: 78}},   // ✅ added
  { id: 'amer_ny',     label: 'New York',    region: 'Americas',    benchmark: {median: 57, topQuartile: 73}},
  { id: 'amer_miami',  label: 'Miami',       region: 'Americas',    benchmark: {median: 56, topQuartile: 72}},   // ✅ added
];

/* Booking centres list (keep short here; add more if needed) */
const BOOKING_CENTRES = [
  'Geneva','Zurich','Luxembourg','London','Dubai','Singapore','Hong Kong','New York','Miami'
];

/* Tier-1 hubs for quick guidance */
const TIER1 = ['London','Luxembourg','Singapore','New York','Hong Kong','Zurich'];

/* ---------- Helpers ---------- */
function clamp01(n: number) { return Math.max(0, Math.min(1, n)); }

function localScore(params: {
  booking: string[];
  products: {lending: boolean; alternatives: boolean; fx: boolean};
  aumMix: number;                 // 1..5 (5 = diversified)
  clientConcentration: number;    // 1..5 (1 best/low concentration, 5 worst)
  docsReadiness: number;          // 1..5 (5 = excellent)
  crossBorder: string[];          // string list, count matters
}): {score: number; components: Record<string, number>} {
  const {booking, products, aumMix, clientConcentration, docsReadiness, crossBorder} = params;

  // 1) Booking coverage (0–30)
  const base = Math.min(booking.length, 6) / 6;             // 0..1, saturate at 6 centres
  const hasTier1 = booking.some(c => TIER1.includes(c));
  const tierBonus = hasTier1 ? 0.15 : 0;                    // +15% if any Tier-1
  const bookingScore = 30 * clamp01(base + tierBonus);

  // 2) Product fit (0–20)
  let prodPoints = 0;
  if (products.lending) prodPoints += 8;
  if (products.alternatives) prodPoints += 8;
  if (products.fx) prodPoints += 4;
  const productScore = Math.min(20, prodPoints);

  // 3) AUM mix (0–15) — higher is better
  const aumScore = 15 * ((aumMix - 1) / 4);                 // 1..5 -> 0..1

  // 4) Client concentration (0–10) — lower is better
  const ccScore = 10 * (1 - (clientConcentration - 1) / 4); // 1..5 -> 1..0

  // 5) Docs readiness (0–20)
  const docsScore = 20 * ((docsReadiness - 1) / 4);

  // 6) Cross-border licenses breadth (0–5)
  const xbl = Math.min(crossBorder.length, 5) / 5;          // normalize to max 5 considered
  const cbScore = 5 * xbl;

  const score = Math.round(
    bookingScore + productScore + aumScore + ccScore + docsScore + cbScore
  );

  return {
    score: Math.max(0, Math.min(100, score)),
    components: { bookingScore, productScore, aumScore, ccScore, docsScore, cbScore }
  };
}

function localNextSteps(
  centres: string[],
  aumMix: number,
  clientConcentration: number,
  products: {lending: boolean; alternatives: boolean; fx: boolean},
  docsReadiness: number,
  licenses: string[]
): string[] {
  const steps: string[] = [];

  const hasTier1 = centres.some(c =>
    TIER1.some(t => c.toLowerCase().includes(t.toLowerCase()))
  );

  if (!centres.length) {
    steps.push('Add at least one booking centre to assess portability.');
  } else if (hasTier1) {
    steps.push('Booking centres include Tier-1 hubs — coverage is already widely accepted.');
  } else {
    steps.push('Add a Tier-1 hub (e.g., London, Luxembourg, Singapore) to widen custodian matches.');
  }

  if ((aumMix ?? 3) <= 2) {
    steps.push('Broaden AUM mix to reduce perceived platform risk.');
  }

  if ((clientConcentration ?? 3) >= 4) {
    steps.push('Reduce top-client concentration below ~40% of AUM to de-risk portability.');
  }

  if (!products.lending || !products.alternatives) {
    steps.push('Enable Lending and Alternatives for a more competitive, “sticky” platform.');
  }

  if ((docsReadiness ?? 3) <= 2) {
    steps.push('Standardize CRS/FATCA + MiFID/LSFin packs for reuse across custodians.');
  }

  if ((licenses?.length ?? 0) < 2) {
    steps.push('Expand cross-border licenses in 1–2 priority jurisdictions to unlock access.');
  }

  return steps;
}

/* ---------- Component ---------- */
export default function PortabilityForm() {
  // Core state
  const [marketId, setMarketId] = useState('ch_geneva');
  const [booking, setBooking] = useState<string[]>(['Geneva','Zurich']);

  const [products, setProducts] = useState({
    lending: true,
    alternatives: false,
    fx: true
  });

  const [aumMix, setAumMix] = useState(3);                // 1..5
  const [clientConcentration, setClientConcentration] = useState(3); // 1..5
  const [docsReadiness, setDocsReadiness] = useState(3);  // 1..5

  const [crossBorder, setCrossBorder] = useState<string[]>(['EU Pass','UK Cover']);

  // UX
  const [touchedBooking, setTouchedBooking] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError]     = useState<string|null>(null);
  const [result, setResult]   = useState<Result|null>(null);

  const pendingReq = useRef<AbortController|null>(null);

  const market  = useMemo(() => MARKETS.find(m=>m.id===marketId), [marketId]);
  const grouped = useMemo(
    () => REGION_ORDER.map(r=>({region:r, items: MARKETS.filter(m=>m.region===r)})),
    []
  );

  /* ---------- Handlers ---------- */
  function toggleCentre(c: string) {
    setTouchedBooking(true);
    setBooking(prev => prev.includes(c) ? prev.filter(x=>x!==c) : [...prev, c]);
  }

  async function analyze() {
    setError(null);
    setLoading(true);
    setResult(null);

    // cancel in-flight
    if (pendingReq.current) { pendingReq.current.abort(); pendingReq.current = null; }

    try {
      if (!booking.length) {
        setError('Select at least one booking centre.');
        setLoading(false);
        return;
      }

      // Local score first (instant)
      const local = localScore({
        booking,
        products,
        aumMix,
        clientConcentration,
        docsReadiness,
        crossBorder
      });

      const nextSteps = localNextSteps(
        booking, aumMix, clientConcentration, products, docsReadiness, crossBorder
      );

      setResult({
        score: local.score,
        median: market?.benchmark.median ?? 60,
        topQuartile: market?.benchmark.topQuartile ?? 78,
        recs: nextSteps,
        interp: [
          `Booking coverage: ${booking.length} centre(s)${booking.some(c=>TIER1.includes(c)) ? ' incl. Tier-1' : ''}.`,
          `Products: ${['lending','alternatives','fx'].filter(k => (products as any)[k]).join(', ') || '—'}.`,
          `AUM mix: ${aumMix}/5 · Client concentration: ${clientConcentration}/5 · Docs readiness: ${docsReadiness}/5.`,
          `Cross-border licenses: ${(crossBorder||[]).join(', ') || '—'}.`
        ]
      });
    } catch (e:any) {
      if (e?.name !== 'AbortError') setError(e?.message || 'Something went wrong.');
    } finally {
      setLoading(false);
    }
  }

  function openPrefilledEmail() {
    if (!result) return;
    const lines = [
      `Portability summary for ${market?.label}`,
      '',
      `Score: ${result.score}/100`,
      `Benchmark — Median ${result.median} • Top quartile ${result.topQuartile}`,
      '',
      `Booking centres: ${booking.join(', ') || '—'}`,
      `Products: ${['lending','alternatives','fx'].filter(k => (products as any)[k]).join(', ') || '—'}`,
      `AUM mix: ${aumMix}/5 | Client concentration: ${clientConcentration}/5 | Docs readiness: ${docsReadiness}/5`,
      `Cross-border: ${crossBorder.join(', ') || '—'}`,
      '',
      'Recommended next steps:',
      ...(result.recs || []).map((r, i) => `${i+1}. ${r}`),
    ].join('\n');

    const subj = encodeURIComponent(`Portability – ${market?.label} (${result.score}/100)`);
    const body = encodeURIComponent(lines);
    window.location.href = `mailto:?subject=${subj}&body=${body}`;
  }

  async function downloadDossier() {
    try {
      const payload = {
        marketLabel: market?.label,
        bookingCentres: booking,
        products,
        aumMix,
        clientConcentration,
        docsReadiness,
        crossBorderLicenses: crossBorder,
        score: result?.score ?? null,
        benchmark: result ? { median: result.median, topQuartile: result.topQuartile } : null,
      };

      const res = await fetch('/api/portability/export', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        // Fallback: let users know the export endpoint is not available
        throw new Error('Export service not available on this environment.');
      }

      const blob = await res.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `Portability_${market?.label || 'Report'}.pdf`;
      document.body.appendChild(a);
      a.click();
      URL.revokeObjectURL(url);
      a.remove();
    } catch (e:any) {
      alert(e?.message || 'Could not generate dossier.');
    }
  }

  /* ---------- UI ---------- */
  return (
    <div className="rounded-2xl border border-white/10 bg-white/[0.03] p-5 text-white space-y-6">
      {/* Market select */}
      <div>
        <div className="text-sm text-white/80 mb-2">Select market</div>
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-2">
          {grouped.map(g => (
            <div key={g.region}>
              <div className="text-xs uppercase tracking-wide text-white/50 mb-1">{g.region}</div>
              <div className="grid gap-1">
                {g.items.map(m => (
                  <button
                    key={m.id}
                    className={`text-left rounded-lg px-3 py-2 border ${
                      marketId===m.id ? 'border-emerald-400/60 bg-emerald-400/10' : 'border-white/10 bg-white/5 hover:bg-white/10'
                    }`}
                    onClick={() => setMarketId(m.id)}
                  >
                    {m.label}
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Booking centres */}
      <div>
        <div className="text-sm text-white/80 mb-2">Booking centres</div>
        <div className="flex flex-wrap gap-2">
          {BOOKING_CENTRES.map(c => {
            const on = booking.includes(c);
            return (
              <button
                key={c}
                onClick={() => toggleCentre(c)}
                className={`rounded-full px-3 py-1.5 text-sm border ${
                  on ? 'border-emerald-400/60 bg-emerald-400/10' : 'border-white/10 bg-white/5 hover:bg-white/10'
                }`}
              >
                {c}
              </button>
            );
          })}
        </div>
        {touchedBooking && !booking.length && (
          <div className="mt-1 text-xs text-rose-300">Please select at least one centre.</div>
        )}
      </div>

      {/* Product fit */}
      <div className="grid sm:grid-cols-3 gap-3">
        <ToggleCard
          label="Lending"
          on={products.lending}
          onToggle={() => setProducts(p=>({...p, lending: !p.lending}))}
        />
        <ToggleCard
          label="Alternatives"
          on={products.alternatives}
          onToggle={() => setProducts(p=>({...p, alternatives: !p.alternatives}))}
        />
        <ToggleCard
          label="FX"
          on={products.fx}
          onToggle={() => setProducts(p=>({...p, fx: !p.fx}))}
        />
      </div>

      {/* Sliders */}
      <div className="grid sm:grid-cols-3 gap-4">
        <Slider
          label="AUM mix diversification"
          value={aumMix}
          onChange={setAumMix}
          help="1 = single-product heavy, 5 = well diversified"
        />
        <Slider
          label="Top-client concentration"
          value={clientConcentration}
          onChange={setClientConcentration}
          help="1 = <20% in top clients, 5 = >60%"
        />
        <Slider
          label="Documentation readiness"
          value={docsReadiness}
          onChange={setDocsReadiness}
          help="1 = fragmented docs, 5 = fully standardized packs"
        />
      </div>

      {/* Cross-border licenses */}
      <div>
        <div className="text-sm text-white/80 mb-2">Cross-border licenses</div>
        <TagEditor
          values={crossBorder}
          placeholder="Add a license (e.g., EU Pass, UK, UAE)..."
          onChange={setCrossBorder}
        />
      </div>

      {/* Actions */}
      <div className="flex flex-wrap gap-3">
        <button
          type="button"
          onClick={analyze}
          disabled={loading}
          className="rounded-xl bg-white text-[#0B0E13] px-4 py-2 text-sm font-semibold hover:bg-white/90 disabled:opacity-60"
        >
          {loading ? 'Calculating…' : 'Analyze Portability'}
        </button>

        {result && (
          <>
            <button
              type="button"
              onClick={openPrefilledEmail}
              className="rounded-xl border border-white/20 px-4 py-2 text-sm font-semibold text-white hover:bg-white/10"
            >
              Email Me the Summary
            </button>
            <button
              type="button"
              onClick={downloadDossier}
              className="rounded-xl bg-emerald-600 px-4 py-2 text-sm font-semibold text-white hover:bg-emerald-700"
            >
              Download Dossier
            </button>
          </>
        )}
      </div>

      {/* Result */}
      {error && (
        <div className="rounded-xl border border-rose-400/30 bg-rose-400/10 p-3 text-sm text-rose-200">
          {error}
        </div>
      )}

      {result && (
        <div className="mt-6 rounded-xl border border-white/10 bg-white/[0.04] p-5">
          <div className="flex items-center justify-between">
            <div className="text-lg font-semibold">Result</div>
            <div className="rounded-full border border-white/10 bg-white/5 px-3 py-1 text-sm">{market?.label}</div>
          </div>

          <div className="mt-3 text-3xl font-semibold">{result.score}/100</div>
          <div className="mt-1 text-sm text-neutral-300">
            Benchmark — Median {result.median} • Top quartile {result.topQuartile}
          </div>

          <div className="mt-4 text-sm font-semibold">Recommended next steps</div>
          <ul className="mt-3 list-disc space-y-1 pl-5 text-sm text-neutral-200">
            {result.recs.map((r,i)=>(<li key={i}>{r}</li>))}
          </ul>

          {Array.isArray(result.interp) && result.interp.length > 0 && (
            <div className="mt-5">
              <div className="text-sm font-semibold mb-2">Interpretation & banker guidance</div>
              <ul className="list-disc space-y-1 pl-5 text-sm text-neutral-200">
                {result.interp.map((t, i) => (<li key={i}>{t}</li>))}
              </ul>
            </div>
          )}
        </div>
      )}

      <p className="mt-5 text-xs text-neutral-400">
        Privacy: We do not store any data without your explicit consent.
      </p>
    </div>
  );
}

/* ---------- UI bits ---------- */
function ToggleCard({label, on, onToggle}:{label:string; on:boolean; onToggle:()=>void}) {
  return (
    <button
      type="button"
      onClick={onToggle}
      className={`rounded-xl border px-4 py-3 text-left transition ${
        on ? 'border-emerald-400/40 bg-emerald-400/10' : 'border-white/10 bg-white/5 hover:bg-white/10'
      }`}
    >
      <div className="text-sm font-semibold">{label}</div>
      <div className="text-xs text-white/60 mt-1">{on ? 'Included' : 'Not included'}</div>
    </button>
  );
}

function Slider({
  label, value, onChange, help
}:{
  label:string; value:number; onChange:(n:number)=>void; help?:string;
}) {
  return (
    <label className="block">
      <div className="text-sm font-medium">{label}</div>
      {help && <div className="text-xs text-white/60 mb-1">{help}</div>}
      <input
        type="range"
        min={1}
        max={5}
        step={1}
        value={value}
        onChange={(e)=>onChange(parseInt(e.target.value,10))}
        className="w-full"
      />
      <div className="text-xs text-white/60 mt-1">Value: {value}/5</div>
    </label>
  );
}

function TagEditor({
  values, onChange, placeholder
}:{ values:string[]; onChange:(v:string[])=>void; placeholder?:string }) {
  const [text, setText] = useState('');
  function addTag() {
    const t = text.trim();
    if (!t) return;
    if (!values.includes(t)) onChange([...values, t]);
    setText('');
  }
  function removeTag(t:string) {
    onChange(values.filter(v=>v!==t));
  }
  return (
    <div>
      <div className="flex flex-wrap gap-2 mb-2">
        {values.map(v=>(
          <span key={v} className="inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1 text-sm">
            {v}
            <button
              type="button"
              className="text-white/60 hover:text-white"
              onClick={()=>removeTag(v)}
              aria-label={`Remove ${v}`}
            >
              ×
            </button>
          </span>
        ))}
      </div>
      <div className="flex gap-2">
        <input
          value={text}
          onChange={(e)=>setText(e.target.value)}
          onKeyDown={(e)=>{ if (e.key==='Enter') { e.preventDefault(); addTag(); } }}
          placeholder={placeholder || 'Add…'}
          className="flex-1 rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none"
        />
        <button
          type="button"
          onClick={addTag}
          className="rounded-lg border border-white/15 bg-white/5 px-3 py-2 text-sm hover:bg-white/10"
        >
          Add
        </button>
      </div>
    </div>
  );
}